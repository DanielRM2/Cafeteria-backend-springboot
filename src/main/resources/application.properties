# ==================== APP y SERVER CONFIG ====================
spring.application.name=Springboot-Cafeteria
server.port=8080

# Tiempo de vida de la sesion en segundos (30 minutos)
server.servlet.session.timeout=1800

# Cookie de sesion segura (activa en produccion)
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true

# ==================== DATABASE (Clever Cloud MySQL) ====================
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.config.import=optional:file:.env[.properties]

# ==================== SPRINGDOC OPENAPI CONFIGURATION ====================
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.swagger-ui.filter=true
springdoc.swagger-ui.docExpansion=none
springdoc.swagger-ui.display-request-duration=true
springdoc.swagger-ui.validatorUrl=

# ==================== HIKARICP CONFIG (OPTIMIZED FOR CLEVER CLOUD FREE TIER) ====================
# Nombre del pool (para identificar en logs)
spring.datasource.hikari.pool-name=CafeteriaHikariPool
# TamaÃ±o msximo de conexiones simultaneas (max recomendado para free tier)
spring.datasource.hikari.maximum-pool-size=4
# Minimo de conexiones inactivas que se mantienen vivas
spring.datasource.hikari.minimum-idle=1
# Tiempo maximo que una conexion puede estar inactiva antes de ser cerrada (en milisegundos)
spring.datasource.hikari.idle-timeout=10000
# Tiempo maximo para obtener una conexion desde el pool
spring.datasource.hikari.connection-timeout=5000
# Detectar conexiones "fugadas" despues de 10 segundos
spring.datasource.hikari.leak-detection-threshold=30000
# Validacion de conexion con una consulta simple
spring.datasource.hikari.connection-test-query=SELECT 1
# Tiempo de espera para validacion de conexion
spring.datasource.hikari.validation-timeout=1000
# Tiempo para fallar si el pool no puede inicializarse correctamente
spring.datasource.hikari.initialization-fail-timeout=1


# ==================== JPA/HIBERNATE ====================
spring.jpa.database=mysql
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false


# ==================== JWT CONFIGURATION ====================
# Clave secreta para firmar los tokens JWT (cambia esto en producción)
jwt.secret=${JWT_SECRET}
# Tiempo de expiración del token en milisegundos (24 horas por defecto)
jwt.expiration=${JWT_EXPIRATION}

# ==================== CORS ====================
app.cors.allowed-origins=${FRONTEND_URL_LOCAL},${FRONTEND_URL_PROD}
app.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
app.cors.allowed-headers=Authorization,Content-Type
app.cors.allow-credentials=true


# ==================== LOGGING ====================
logging.level.org.springframework=INFO
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.com.urban=DEBUG

spring.main.allow-bean-definition-overriding=true

# ==================== MERCADO PAGO ====================
mercadopago.access-token=${MERCADOPAGO_ACCESS_TOKEN}
mercadopago.url-success=${FRONTEND_URL_PROD}/pago-exitoso
mercadopago.url-failure=${FRONTEND_URL_PROD}/pago-fallido
mercadopago.url-pending=${FRONTEND_URL_PROD}/pago-pendiente


spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB