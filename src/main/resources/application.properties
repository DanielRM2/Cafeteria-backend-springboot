# ==================== APP y SERVER CONFIG ====================
spring.application.name=Springboot-Cafeteria
server.port=8080

# Tiempo de vida de la sesion en segundos (30 minutos)
server.servlet.session.timeout=1800

# Cookie de sesion segura (activa en produccion)
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=true

# ==================== DATABASE (Clever Cloud MySQL) ====================
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.config.import=optional:file:.env[.properties]

# ==================== HIKARICP CONFIG (OPTIMIZED FOR CLEVER CLOUD FREE TIER) ====================
# Nombre del pool (para identificar en logs)
spring.datasource.hikari.pool-name=CafeteriaHikariPool
# Tama√±o msximo de conexiones simultaneas (max recomendado para free tier)
spring.datasource.hikari.maximum-pool-size=4
# Minimo de conexiones inactivas que se mantienen vivas
spring.datasource.hikari.minimum-idle=1
# Tiempo maximo que una conexion puede estar inactiva antes de ser cerrada (en milisegundos)
spring.datasource.hikari.idle-timeout=10000
# Tiempo maximo para obtener una conexion desde el pool
spring.datasource.hikari.connection-timeout=5000
# Detectar conexiones "fugadas" despues de 10 segundos
spring.datasource.hikari.leak-detection-threshold=10000
# Validacion de conexion con una consulta simple
spring.datasource.hikari.connection-test-query=SELECT 1
# Tiempo de espera para validacion de conexion
spring.datasource.hikari.validation-timeout=1000
# Tiempo para fallar si el pool no puede inicializarse correctamente
spring.datasource.hikari.initialization-fail-timeout=1


# ==================== JPA/HIBERNATE ====================
spring.jpa.database=mysql
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.open-in-view=false


# ==================== CORS ====================
# Configuracion para desarrollo (ajusta para produccion)
spring.graphql.cors.allowed-origins==${CORS_ALLOWED_ORIGINS:http://localhost:5173,http://127.0.0.1:5173}
spring.graphql.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,PATCH,DELETE,OPTIONS}
spring.graphql.cors.allowed-headers=${CORS_ALLOWED_HEADERS:Authorization,Content-Type,Accept,X-Requested-With}
spring.graphql.cors.exposed-headers=${CORS_EXPOSED_HEADERS:Location,Content-Disposition}
spring.graphql.cors.allow-credentials==${CORS_ALLOW_CREDENTIALS:true}
# Cache de preflight requests
spring.graphql.cors.max-age=3600

# ==================== LOGGING ====================
logging.level.org.springframework=INFO
logging.level.org.hibernate.SQL=ERROR
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.com.urban=DEBUG


